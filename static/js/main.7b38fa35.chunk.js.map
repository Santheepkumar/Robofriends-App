{"version":3,"sources":["serviceWorker.js","components/Card.js","components/Cardlist.js","components/Search.js","components/Scroll.js","containers/app.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","Cardlist","robots","map","user","i","key","Sb","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","padding","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredbots","filter","robot","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCQSC,EAvBF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAE3B,OAGC,yBAAKC,UAAU,mDAEf,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BAEA,4BAAKF,GACL,2BAAIC,MCYWK,EAvBA,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAElB,OAEE,6BAGEA,EAAOC,KAAI,SAACC,EAAMC,GAET,OAAQ,kBAAC,EAAD,CACLC,IAAKD,EACZR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCJZW,EAVJ,SAAC,GAA+B,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aACzB,OACC,2BACCC,KAAK,SACLC,YAAY,kBACZb,UAAU,mCACVc,SAAaH,KCEDI,EARA,SAACC,GACf,OACE,yBAAKC,MAAO,CAACC,UAAW,SAASC,QAAS,OAAQC,OAAQ,UACvDJ,EAAMK,WC6CGC,G,kBA1Cd,aAAc,IAAD,8BACZ,+CAODC,eAAgB,SAACC,GACf,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SAP1C,EAAKC,MAAQ,CACZxB,OAAQ,GACRM,YAAa,IAJF,E,iFAWQ,IAAD,OACnBmB,MAAM,8CACLC,MAAK,SAAAC,GAAa,OAAOA,EAASC,UAClCF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAACrB,OAAQ6B,S,+BAOrC,IAAD,EACiCC,KAAKN,MAA7BxB,EADT,EACSA,OAAQM,EADjB,EACiBA,YACVyB,EAAc/B,EAAOgC,QAAO,SAAAC,GACjC,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS7B,EAAY4B,kBAEtD,OAAKlC,EAAOoC,OAKZ,yBAAMxC,UAAU,MACf,2CACA,kBAAC,EAAD,CAAIW,aAAcuB,KAAKX,iBACvB,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUnB,OAAQ+B,MARZ,2C,GA5BOM,cCClBC,IAASC,OAAQ,kBAAC,EAAD,MAEhBC,SAASC,eAAe,SNuHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,iB","file":"static/js/main.7b38fa35.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\n\r\n\r\nconst Card = ({name, email, id}) => {\r\n\r\n\treturn (\r\n\r\n\r\n\t\t<div className=\"tc bg-light-green dib pa2 ma2 grow bw2 shadow-5\">\r\n\r\n\t\t<img alt=\"robots\" src={`https://robohash.org/${id}?200x200`}/>\r\n\t\t<div>\r\n\r\n\t\t<h2>{name}</h2>\r\n\t\t<p>{email}</p>\r\n\r\n\t\t</div>\r\n\r\n\r\n\r\n\t\t</div>\r\n\r\n\r\n\t\t);\r\n} \r\n\r\nexport default Card","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst Cardlist = ({robots}) => {\r\n\r\n\treturn (\r\n\r\n\t\t\t<div>\r\n\t\t\t\t{\r\n\r\n\t\t\t\t\trobots.map((user, i) => {\r\n\r\n\t\t       \t\t\t\t return (<Card \r\n\t\t       \t\t\t\t \t\t\tkey={i} \r\n\t\t\t\t\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\t\t\t\t\temail={robots[i].email} \r\n\t\t\t\t\t\t\t\t\t />)\r\n\r\n\t\t\t\t\t})\r\n\t\t\t\t}\t\t\t\t\t\t\t\t\t   \t\r\n\t\t\t\r\n\t\t\t</div>\r\n\t\t)\r\n}\t\t\t\t\t\t\t\t\t\r\n\t\t\t\r\n\t export default Cardlist;\r\n\r\n\r\n\t","import React from 'react'\r\n\r\nconst Sb = ({searchfield, searchChange})=> {\r\n\treturn (\r\n\t\t<input \r\n\t\t\ttype=\"search\" \r\n\t\t\tplaceholder=\"Search for bots\" \r\n\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\" \r\n\t\t\tonChange = { searchChange  }\r\n\t\t/>\t\r\n\t\t)\r\n}\r\nexport default Sb;","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n\treturn(\t\t\r\n\t\t\t<div style={{overflowY: 'scroll',padding: \"10px\", height: '800px'}}>\r\n\t\t\t \t{props.children}\r\n\t\t\t</div>\r\n\t\t\t \t\t\t)\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react'\r\nimport Cardlist from \"../components/Cardlist\";\r\nimport Sb from '../components/Search'\r\nimport Scroll from '../components/Scroll'\r\nimport './app.css'\r\n\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\t\r\n\tonSearchChange =(event)=> {\r\n\t\t\tthis.setState({searchfield: event.target.value});\r\n\t\t};\r\n\t\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => {return response.json()})\r\n\t\t.then(users => this.setState({robots: users})\r\n\t\t)\r\n\t}\r\n\r\n\t\r\n\r\n\trender()\r\n\t\t{\r\n\t\t\tconst { robots, searchfield } = this.state;\r\n\t\t\tconst filteredbots =robots.filter(robot => {\r\n\t\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n\t\t\t})\r\n\t\t\tif (!robots.length){\r\n\t\t\t\treturn <h1>Leading</h1>\r\n\t\t\t}else {\r\n\r\n\t\t\treturn (\r\n\t\t\t<div  className=\"tc\">\r\n\t\t\t\t<h1>Robofriends</h1>\r\n\t\t\t\t<Sb searchChange={this.onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<Cardlist robots={filteredbots}/>\r\n\t\t\t\t</Scroll>\t\t\r\n\t\t\t</div>\r\n\t\t)\r\n\t\t}\r\n\t}\r\n} \r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/app'\n\n\nReactDOM.render( <App/>\n\n,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}